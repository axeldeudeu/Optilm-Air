name: Weather Data Collector with Geolocation

on:
  schedule:
    # Collecte toutes les heures
    - cron: '0 * * * *'
  # D√©clenchement manuel
  workflow_dispatch:
    inputs:
      latitude:
        description: 'Latitude personnalis√©e (optionnelle)'
        required: false
        type: string
        default: '48.8566'
      longitude:
        description: 'Longitude personnalis√©e (optionnelle)'
        required: false
        type: string
        default: '2.3522'
      log_level:
        description: 'Niveau de log'
        required: false
        type: choice
        options:
          - INFO
          - DEBUG
          - WARNING
        default: 'INFO'

env:
  # Variables globales
  PYTHON_VERSION: '3.11'
  DEFAULT_LATITUDE: 48.8566
  DEFAULT_LONGITUDE: 2.3522

jobs:
  collect-weather-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "‚úÖ D√©pendances install√©es"
        
    - name: Create Required Directories
      run: |
        mkdir -p data logs
        echo "üìÅ Dossiers cr√©√©s: data/, logs/"
        
    - name: Verify Configuration
      env:
        GCP_AIR_QUALITY_API_KEY: ${{ secrets.GCP_AIR_QUALITY_API_KEY }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        FIREBASE_CREDENTIALS_JSON: ${{ secrets.FIREBASE_CREDENTIALS_JSON }}
      run: |
        echo "üîß V√©rification de la configuration:"
        echo "  - GCP Project ID: ${{ secrets.GCP_PROJECT_ID && '‚úÖ Configur√©' || '‚ùå Manquant' }}"
        echo "  - GCP Air Quality API: ${{ secrets.GCP_AIR_QUALITY_API_KEY && '‚úÖ Configur√©' || '‚ùå Manquant' }}"
        echo "  - OpenWeather API: ${{ secrets.OPENWEATHER_API_KEY && '‚úÖ Configur√©' || '‚ùå Manquant' }}"
        echo "  - Firebase Credentials: ${{ secrets.FIREBASE_CREDENTIALS_JSON && '‚úÖ Configur√©' || '‚ùå Manquant' }}"
        
    - name: Display Collection Parameters
      run: |
        # Utiliser les inputs si fournis, sinon les valeurs par d√©faut
        LATITUDE="${{ github.event.inputs.latitude || env.DEFAULT_LATITUDE }}"
        LONGITUDE="${{ github.event.inputs.longitude || env.DEFAULT_LONGITUDE }}"
        LOG_LEVEL="${{ github.event.inputs.log_level || 'INFO' }}"
        
        echo "üöÄ Param√®tres de collecte:"
        echo "  üìç Localisation: $LATITUDE, $LONGITUDE"
        echo "  üìä Niveau de log: $LOG_LEVEL"
        echo "  ‚è∞ Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        echo "  üîÑ Run ID: ${{ github.run_id }}"
        echo "  üèÉ Run Number: ${{ github.run_number }}"
        
        # Exporter pour les √©tapes suivantes
        echo "COLLECTION_LATITUDE=$LATITUDE" >> $GITHUB_ENV
        echo "COLLECTION_LONGITUDE=$LONGITUDE" >> $GITHUB_ENV
        echo "COLLECTION_LOG_LEVEL=$LOG_LEVEL" >> $GITHUB_ENV
        
    - name: Run Weather Data Collection
      env:
        GCP_AIR_QUALITY_API_KEY: ${{ secrets.GCP_AIR_QUALITY_API_KEY }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        FIREBASE_CREDENTIALS_JSON: ${{ secrets.FIREBASE_CREDENTIALS_JSON }}
        DEFAULT_LATITUDE: ${{ env.COLLECTION_LATITUDE }}
        DEFAULT_LONGITUDE: ${{ env.COLLECTION_LONGITUDE }}
        LOG_LEVEL: ${{ env.COLLECTION_LOG_LEVEL }}
      run: |
        echo "üöÄ D√©marrage de la collecte de donn√©es m√©t√©o avec g√©olocalisation"
        
        # Lancer la collecte en mode collect
        python main.py collect
        
        echo "‚úÖ Collecte termin√©e avec succ√®s"
        
    - name: Verify Collection Results
      if: always()
      run: |
        echo "üìä V√©rification des r√©sultats de collecte:"
        
        # V√©rifier la structure des dossiers
        echo "üìÅ Structure des fichiers:"
        ls -la data/ 2>/dev/null || echo "  ‚ùå Dossier data/ vide ou absent"
        ls -la logs/ 2>/dev/null || echo "  ‚ùå Dossier logs/ vide ou absent"
        
        # V√©rifier le fichier de donn√©es principal
        if [ -f "data/latest_data.json" ]; then
          echo "‚úÖ Fichier de donn√©es principal trouv√©"
          echo "üìÑ Aper√ßu des donn√©es (10 premi√®res lignes):"
          head -n 10 data/latest_data.json | sed 's/^/  /'
          
          # Analyser le contenu JSON
          echo "üîç Analyse du contenu:"
          python -c "
import json
try:
    with open('data/latest_data.json', 'r') as f:
        data = json.load(f)
    print(f'  ‚è∞ Timestamp: {data.get(\"timestamp\", \"N/A\")}')
    print(f'  üìç Location: {data.get(\"location\", {})}')
    
    status = data.get('collection_status', {})
    print(f'  üå¨Ô∏è  Air Quality: {\"‚úÖ\" if status.get(\"air_quality_success\") else \"‚ùå\"}')
    print(f'  üå§Ô∏è  Weather: {\"‚úÖ\" if status.get(\"weather_success\") else \"‚ùå\"}')
    
    # Taille du fichier
    import os
    size = os.path.getsize('data/latest_data.json')
    print(f'  üìè Taille: {size} bytes')
    
except Exception as e:
    print(f'  ‚ùå Erreur analyse JSON: {e}')
"
        else
          echo "‚ùå Fichier de donn√©es principal non trouv√©"
        fi
        
        # V√©rifier les logs
        if [ -d "logs" ] && [ "$(ls -A logs/)" ]; then
          echo "üìã Fichiers de log trouv√©s:"
          ls -la logs/ | sed 's/^/  /'
          
          # Afficher les derni√®res lignes du log le plus r√©cent
          LATEST_LOG=$(ls -t logs/*.log 2>/dev/null | head -n1)
          if [ -n "$LATEST_LOG" ]; then
            echo "üìù Derni√®res entr√©es de log ($LATEST_LOG):"
            tail -n 5 "$LATEST_LOG" | sed 's/^/  /'
          fi
        else
          echo "‚ö†Ô∏è Aucun fichier de log trouv√©"
        fi
        
    - name: Generate Collection Summary
      if: always()
      run: |
        echo "üìà R√©sum√© de la collecte:" > collection_summary.txt
        echo "=============================" >> collection_summary.txt
        echo "‚è∞ Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> collection_summary.txt
        echo "üèÉ Run: ${{ github.run_number }}" >> collection_summary.txt
        echo "üìç Coordonn√©es: ${{ env.COLLECTION_LATITUDE }}, ${{ env.COLLECTION_LONGITUDE }}" >> collection_summary.txt
        echo "üìä Log Level: ${{ env.COLLECTION_LOG_LEVEL }}" >> collection_summary.txt
        echo "" >> collection_summary.txt
        
        # Statut des fichiers
        if [ -f "data/latest_data.json" ]; then
          echo "‚úÖ Donn√©es collect√©es avec succ√®s" >> collection_summary.txt
          FILE_SIZE=$(stat -f%z data/latest_data.json 2>/dev/null || stat -c%s data/latest_data.json 2>/dev/null || echo "unknown")
          echo "üìè Taille du fichier: $FILE_SIZE bytes" >> collection_summary.txt
        else
          echo "‚ùå √âchec de la collecte de donn√©es" >> collection_summary.txt
        fi
        
        # Afficher le r√©sum√©
        echo "üìÑ R√©sum√© g√©n√©r√©:"
        cat collection_summary.txt | sed 's/^/  /'
        
    - name: Upload Data Files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: weather-data-${{ github.run_number }}-${{ github.run_attempt }}
        path: |
          data/
          logs/
          collection_summary.txt
        retention-days: 7
        if-no-files-found: warn
        
    - name: Upload Latest Data Only
      if: always() && hashFiles('data/latest_data.json') != ''
      uses: actions/upload-artifact@v4
      with:
        name: latest-weather-data
        path: data/latest_data.json
        retention-days: 30
        if-no-files-found: ignore
        
    - name: Notify Success
      if: success()
      run: |
        echo "üéâ Collecte de donn√©es m√©t√©o r√©ussie!"
        echo "üìä Les donn√©es ont √©t√© sauvegard√©es et sont disponibles via Firebase"
        echo "üì¶ Artifacts disponibles pour ${{ env.COLLECTION_LATITUDE }}, ${{ env.COLLECTION_LONGITUDE }}"
        
    - name: Notify Failure
      if: failure()
      run: |
        echo "‚ùå √âchec de la collecte de donn√©es m√©t√©o"
        echo "üîç V√©rifiez les logs pour plus de d√©tails"
        echo "‚öôÔ∏è V√©rifiez la configuration des secrets GitHub"
        
        # Informations de debug
        echo "üêõ Informations de debug:"
        echo "  - Python version: $(python --version)"
        echo "  - Working directory: $(pwd)"
        echo "  - Environment variables pr√©sentes:"
        env | grep -E "(GCP|OPENWEATHER|FIREBASE|DEFAULT)" | sed 's/=.*/=***/' | sed 's/^/    /'
