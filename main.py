#!/usr/bin/env python3
"""
Script principal pour collecter les donn√©es de qualit√© de l'air et m√©t√©orologiques
Version simplifi√©e pour √©viter les probl√®mes de d√©pendances
"""

import os
import sys
import asyncio
from datetime import datetime, timezone
from typing import Dict, Any

from data_collectors.air_quality_collector import AirQualityCollector
from data_collectors.weather_collector import WeatherCollector
from storage.data_storage import DataStorage
from utils.logger import setup_logger
from utils.config import Config


class DataCollectionOrchestrator:
    """Orchestrateur principal pour la collecte de donn√©es"""
    
    def __init__(self):
        try:
            self.config = Config()
            self.logger = setup_logger(__name__)
            self.storage = DataStorage()
            self.air_quality_collector = AirQualityCollector(
                api_key=self.config.gcp_api_key,
                project_id=self.config.gcp_project_id
            )
            self.weather_collector = WeatherCollector(
                api_key=self.config.openweather_api_key
            )
            self.logger.info("Orchestrateur initialis√© avec succ√®s")
        except Exception as e:
            print(f"Erreur initialisation: {e}")
            raise
    
    async def collect_all_data(self) -> Dict[str, Any]:
        """Collecte toutes les donn√©es de mani√®re asynchrone"""
        try:
            self.logger.info("D√©but de la collecte de donn√©es")
            
            # Coordonn√©es par d√©faut
            lat = self.config.default_latitude
            lon = self.config.default_longitude
            
            # Collecte parall√®le des donn√©es
            air_quality_task = self.air_quality_collector.get_air_quality_data(lat, lon)
            weather_task = self.weather_collector.get_weather_data(lat, lon)
            
            air_quality_data, weather_data = await asyncio.gather(
                air_quality_task, 
                weather_task,
                return_exceptions=True
            )
            
            # Gestion des erreurs
            if isinstance(air_quality_data, Exception):
                self.logger.error(f"Erreur collecte qualit√© de l'air: {air_quality_data}")
                air_quality_data = None
            
            if isinstance(weather_data, Exception):
                self.logger.error(f"Erreur collecte m√©t√©o: {weather_data}")
                weather_data = None
            
            # Cr√©ation du payload final
            collected_data = {
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'location': {'latitude': lat, 'longitude': lon},
                'air_quality': air_quality_data,
                'weather': weather_data,
                'collection_status': {
                    'air_quality_success': air_quality_data is not None,
                    'weather_success': weather_data is not None
                }
            }
            
            return collected_data
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la collecte: {str(e)}")
            raise
    
    async def run(self):
        """Point d'entr√©e principal"""
        try:
            # Collecte des donn√©es
            data = await self.collect_all_data()
            
            # Sauvegarde
            result = await self.storage.save_data(data)
            
            # Log de succ√®s
            success_msg = f"Collecte r√©ussie - AQ: {data['collection_status']['air_quality_success']}, Weather: {data['collection_status']['weather_success']}"
            self.logger.info(success_msg)
            print(success_msg)
            
            return data
            
        except Exception as e:
            error_msg = f"Erreur critique: {str(e)}"
            self.logger.error(error_msg)
            print(error_msg)
            sys.exit(1)


async def main():
    """Point d'entr√©e du script"""
    try:
        print("üöÄ D√©marrage du collecteur de donn√©es m√©t√©o")
        
        orchestrator = DataCollectionOrchestrator()
        result = await orchestrator.run()
        
        # Affichage du r√©sum√©
        print(f"‚úÖ Collecte termin√©e √† {result['timestamp']}")
        print(f"üìç Location: {result['location']['latitude']}, {result['location']['longitude']}")
        print(f"üå¨Ô∏è  Air Quality: {'‚úÖ' if result['collection_status']['air_quality_success'] else '‚ùå'}")
        print(f"üå§Ô∏è  Weather: {'‚úÖ' if result['collection_status']['weather_success'] else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå Erreur fatale: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
